import { Rectangle } from '@pixi/math';
import { Texture, ExtensionType, BaseTexture } from '@pixi/core';
import { getResolutionOfUrl, deprecation, url } from '@pixi/utils';
import { LoaderResource } from '@pixi/loaders';

/*!
 * @pixi/spritesheet - v6.5.5
 * Compiled Fri, 30 Sep 2022 13:37:53 UTC
 *
 * @pixi/spritesheet is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
var Spritesheet = function() {
  function Spritesheet2(texture, data, resolutionFilename) {
    if (resolutionFilename === void 0) {
      resolutionFilename = null;
    }
    this.linkedSheets = [];
    this._texture = texture instanceof Texture ? texture : null;
    this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;
    this.textures = {};
    this.animations = {};
    this.data = data;
    var resource = this.baseTexture.resource;
    this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));
    this._frames = this.data.frames;
    this._frameKeys = Object.keys(this._frames);
    this._batchIndex = 0;
    this._callback = null;
  }
  Spritesheet2.prototype._updateResolution = function(resolutionFilename) {
    if (resolutionFilename === void 0) {
      resolutionFilename = null;
    }
    var scale = this.data.meta.scale;
    var resolution = getResolutionOfUrl(resolutionFilename, null);
    if (resolution === null) {
      resolution = scale !== void 0 ? parseFloat(scale) : 1;
    }
    if (resolution !== 1) {
      this.baseTexture.setResolution(resolution);
    }
    return resolution;
  };
  Spritesheet2.prototype.parse = function(callback) {
    var _this = this;
    if (callback) {
      deprecation("6.5.0", "Spritesheet.parse callback is deprecated, use the return Promise instead.");
    }
    return new Promise(function(resolve) {
      _this._callback = function(textures) {
        callback === null || callback === void 0 ? void 0 : callback(textures);
        resolve(textures);
      };
      _this._batchIndex = 0;
      if (_this._frameKeys.length <= Spritesheet2.BATCH_SIZE) {
        _this._processFrames(0);
        _this._processAnimations();
        _this._parseComplete();
      } else {
        _this._nextBatch();
      }
    });
  };
  Spritesheet2.prototype._processFrames = function(initialFrameIndex) {
    var frameIndex = initialFrameIndex;
    var maxFrames = Spritesheet2.BATCH_SIZE;
    while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length) {
      var i = this._frameKeys[frameIndex];
      var data = this._frames[i];
      var rect = data.frame;
      if (rect) {
        var frame = null;
        var trim = null;
        var sourceSize = data.trimmed !== false && data.sourceSize ? data.sourceSize : data.frame;
        var orig = new Rectangle(0, 0, Math.floor(sourceSize.w) / this.resolution, Math.floor(sourceSize.h) / this.resolution);
        if (data.rotated) {
          frame = new Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.h) / this.resolution, Math.floor(rect.w) / this.resolution);
        } else {
          frame = new Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);
        }
        if (data.trimmed !== false && data.spriteSourceSize) {
          trim = new Rectangle(Math.floor(data.spriteSourceSize.x) / this.resolution, Math.floor(data.spriteSourceSize.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);
        }
        this.textures[i] = new Texture(this.baseTexture, frame, orig, trim, data.rotated ? 2 : 0, data.anchor);
        Texture.addToCache(this.textures[i], i);
      }
      frameIndex++;
    }
  };
  Spritesheet2.prototype._processAnimations = function() {
    var animations = this.data.animations || {};
    for (var animName in animations) {
      this.animations[animName] = [];
      for (var i = 0; i < animations[animName].length; i++) {
        var frameName = animations[animName][i];
        this.animations[animName].push(this.textures[frameName]);
      }
    }
  };
  Spritesheet2.prototype._parseComplete = function() {
    var callback = this._callback;
    this._callback = null;
    this._batchIndex = 0;
    callback.call(this, this.textures);
  };
  Spritesheet2.prototype._nextBatch = function() {
    var _this = this;
    this._processFrames(this._batchIndex * Spritesheet2.BATCH_SIZE);
    this._batchIndex++;
    setTimeout(function() {
      if (_this._batchIndex * Spritesheet2.BATCH_SIZE < _this._frameKeys.length) {
        _this._nextBatch();
      } else {
        _this._processAnimations();
        _this._parseComplete();
      }
    }, 0);
  };
  Spritesheet2.prototype.destroy = function(destroyBase) {
    var _a;
    if (destroyBase === void 0) {
      destroyBase = false;
    }
    for (var i in this.textures) {
      this.textures[i].destroy();
    }
    this._frames = null;
    this._frameKeys = null;
    this.data = null;
    this.textures = null;
    if (destroyBase) {
      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.destroy();
      this.baseTexture.destroy();
    }
    this._texture = null;
    this.baseTexture = null;
    this.linkedSheets = [];
  };
  Spritesheet2.BATCH_SIZE = 1e3;
  return Spritesheet2;
}();
var SpritesheetLoader = function() {
  function SpritesheetLoader2() {
  }
  SpritesheetLoader2.use = function(resource, next) {
    var _a, _b;
    var loader = this;
    var imageResourceName = resource.name + "_image";
    if (!resource.data || resource.type !== LoaderResource.TYPE.JSON || !resource.data.frames || loader.resources[imageResourceName]) {
      next();
      return;
    }
    var multiPacks = (_b = (_a = resource.data) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.related_multi_packs;
    if (Array.isArray(multiPacks)) {
      var _loop_1 = function(item2) {
        if (typeof item2 !== "string") {
          return "continue";
        }
        var itemName = item2.replace(".json", "");
        var itemUrl = url.resolve(resource.url.replace(loader.baseUrl, ""), item2);
        if (loader.resources[itemName] || Object.values(loader.resources).some(function(r) {
          return url.format(url.parse(r.url)) === itemUrl;
        })) {
          return "continue";
        }
        var options = {
          crossOrigin: resource.crossOrigin,
          loadType: LoaderResource.LOAD_TYPE.XHR,
          xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON,
          parentResource: resource,
          metadata: resource.metadata
        };
        loader.add(itemName, itemUrl, options);
      };
      for (var _i = 0, multiPacks_1 = multiPacks; _i < multiPacks_1.length; _i++) {
        var item = multiPacks_1[_i];
        _loop_1(item);
      }
    }
    var loadOptions = {
      crossOrigin: resource.crossOrigin,
      metadata: resource.metadata.imageMetadata,
      parentResource: resource
    };
    var resourcePath = SpritesheetLoader2.getResourcePath(resource, loader.baseUrl);
    loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {
      if (res.error) {
        next(res.error);
        return;
      }
      var spritesheet = new Spritesheet(res.texture, resource.data, resource.url);
      spritesheet.parse().then(function() {
        resource.spritesheet = spritesheet;
        resource.textures = spritesheet.textures;
        next();
      });
    });
  };
  SpritesheetLoader2.getResourcePath = function(resource, baseUrl) {
    if (resource.isDataUrl) {
      return resource.data.meta.image;
    }
    return url.resolve(resource.url.replace(baseUrl, ""), resource.data.meta.image);
  };
  SpritesheetLoader2.extension = ExtensionType.Loader;
  return SpritesheetLoader2;
}();

export { Spritesheet, SpritesheetLoader };
